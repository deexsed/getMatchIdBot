"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
"""
import logging
from telegram import Update
from telegram.ext import CallbackContext
from services.stats_service import get_user_stats, get_period_stats, get_user_mmr, update_user_mmr
from utils.messages import get_stats_text
from utils.keyboards import get_period_stats_keyboard
from utils.decorators import handle_errors
from utils.rank_utils import get_rank_info

logger = logging.getLogger(__name__)

@handle_errors
async def stats_handler(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    nickname = f"@{update.message.from_user.username}" if update.message.from_user.username else update.message.from_user.first_name
    
    stats_data = get_user_stats(nickname)
    
    if stats_data['total_games'] == 0:
        await update.message.reply_text('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π.')
        return
        
    stats_text = get_stats_text(stats_data)
    await update.message.reply_text(stats_text, parse_mode='Markdown')

@handle_errors
async def period_stats_handler(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
    keyboard = get_period_stats_keyboard()
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:', reply_markup=keyboard)

@handle_errors
async def handle_period_stats(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    nickname = f"@{query.from_user.username}" if query.from_user.username else query.from_user.first_name
    period = query.data.split('_')[1]
    
    period_days = {
        '24h': 1,
        'week': 7,
        'month': 30
    }[period]
    
    stats = get_period_stats(nickname, period_days)
    
    if stats['total_games'] == 0:
        await query.message.reply_text(f'–ù–µ—Ç –º–∞—Ç—á–µ–π –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.')
        return
    
    period_text = {
        '24h': "–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞",
        'week': "–∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é",
        'month': "–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü"
    }[period]
    
    stats_text = get_stats_text(stats)
    await query.message.reply_text(stats_text, parse_mode='Markdown')

@handle_errors
async def mmr_command(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π MMR –∏ —Ä–∞–Ω–≥"""
    nickname = f"@{update.message.from_user.username}" if update.message.from_user.username else update.message.from_user.first_name
    
    mmr_data = get_user_mmr(nickname)
    if not mmr_data or mmr_data['current_mmr'] is None:
        await update.message.reply_text(
            'MMR –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /setmmr <—á–∏—Å–ª–æ> –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ MMR.'
        )
        return
    
    rank_info = get_rank_info(mmr_data['current_mmr'])
    if not rank_info:
        await update.message.reply_text('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Ä–∞–Ω–≥–∞.')
        return
    
    medal_progress_bar = generate_progress_bar(rank_info['medal_progress'])
    rank_progress_bar = generate_progress_bar(rank_info['next_rank_progress'])
    
    text = (
        f"üéÆ *–í–∞—à —Ç–µ–∫—É—â–∏–π MMR:* {mmr_data['current_mmr']}\n"
        f"üèÜ *–†–∞–Ω–≥:* {rank_info['emoji']} {rank_info['rank']} [{rank_info['medal']}]\n\n"
    )
    
    # –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –º–µ–¥–∞–ª–∏
    text += (
        f"*–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ {rank_info['rank']} [{rank_info['medal'] + 1 if rank_info['medal'] < 5 else 1}]:*\n"
        f"{medal_progress_bar} {rank_info['medal_progress']:.1f}%\n"
        f"‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å –Ω–∞–±—Ä–∞—Ç—å: {rank_info['mmr_to_next_medal']} MMR\n\n"
    )
    
    # –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–Ω–≥–∞
    if rank_info['rank'] != 'Immortal':
        text += (
            f"*–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ {rank_info['next_rank']}:*\n"
            f"{rank_progress_bar} {rank_info['next_rank_progress']:.1f}%\n"
            f"‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å –Ω–∞–±—Ä–∞—Ç—å: {rank_info['mmr_to_next_rank']} MMR\n"
            f"‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–Ω–≥–∞: {rank_info['current_mmr_range'][0]}-{rank_info['current_mmr_range'][1]} MMR\n"
        )
    
    text += f"\nüí´ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {mmr_data['history']}"
    
    await update.message.reply_text(text, parse_mode='Markdown')

def generate_progress_bar(percentage, length=10):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
    filled = int(percentage / 100 * length)
    return '‚ñ∞' * filled + '‚ñ±' * (length - filled)

@handle_errors
async def set_mmr_command(update: Update, context: CallbackContext) -> None:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç MMR –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not context.args:
        await update.message.reply_text(
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ MMR. –ü—Ä–∏–º–µ—Ä: /setmmr 3000'
        )
        return
    
    try:
        mmr = int(context.args[0])
        if mmr < 0 or mmr > 12000:  # –†–∞–∑—É–º–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
            await update.message.reply_text('MMR –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 0 –∏ 12000.')
            return
        
        nickname = f"@{update.message.from_user.username}" if update.message.from_user.username else update.message.from_user.first_name
        update_user_mmr(nickname, mmr)
        
        rank_info = get_rank_info(mmr)
        
        await update.message.reply_text(
            f"‚úÖ MMR —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n"
            f"üéÆ *–¢–µ–∫—É—â–∏–π MMR:* {mmr}\n"
            f"üèÜ *–í–∞—à —Ä–∞–Ω–≥:* {rank_info['emoji']} {rank_info['rank']} [{rank_info['medal']}]",
            parse_mode='Markdown'
        )
        
    except ValueError:
        await update.message.reply_text(
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: /setmmr 3000'
        ) 