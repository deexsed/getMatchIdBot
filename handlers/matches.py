"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–∞—Ç—á–µ–π
"""
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
from services.hero_service import get_all_heroes, get_user_heroes, HEROES_PER_PAGE
from services.stats_service import get_last_matches
from services.match_service import save_match
from utils.keyboards import (
    get_hero_selection_keyboard,
    get_match_outcome_keyboard,
    get_restart_keyboard
)
from utils.decorators import handle_errors
import json

logger = logging.getLogger(__name__)

@handle_errors
async def new_game(update: Update, context: CallbackContext) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –Ω–æ–≤–æ–≥–æ –º–∞—Ç—á–∞"""
    context.user_data.clear()
    await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ ID –º–∞—Ç—á–∞:')
    context.user_data['waiting_for_match_id'] = True

@handle_errors
async def handle_message(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if context.user_data.get('waiting_for_search'):
        search_query = update.message.text.strip()
        context.user_data['waiting_for_search'] = False
        await send_hero_selection(update, context, search_query=search_query)
        return
        
    if context.user_data.get('waiting_for_match_id'):
        await handle_match_id(update, context)

@handle_errors
async def handle_match_id(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ ID –º–∞—Ç—á–∞"""
    nickname = f"@{update.message.from_user.username}" if update.message.from_user.username else update.message.from_user.first_name
    match_id = update.message.text.strip()
    
    if not match_id.isdigit():
        await update.message.reply_text('ID –º–∞—Ç—á–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.')
        return
        
    if not (8 <= len(match_id) <= 16):
        await update.message.reply_text('ID –º–∞—Ç—á–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–æ–π –æ—Ç 8 –¥–æ 16 —Ü–∏—Ñ—Ä.')
        return

    context.user_data['match_id'] = match_id
    context.user_data['nickname'] = nickname
    context.user_data['waiting_for_match_id'] = False
    
    await send_hero_selection(update, context)

@handle_errors
async def send_hero_selection(update: Update, context: CallbackContext, page: int = 1, search_query: str = None) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –≥–µ—Ä–æ—è–º–∏"""
    keyboard = []
    heroes = get_all_heroes()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞ –≤ –Ω–∞—á–∞–ª–µ
    keyboard.append([InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="search")])
    
    if search_query:
        filtered_heroes = [
            hero for hero in heroes 
            if search_query.lower() in hero['localized_name'].lower()
        ]
        heroes_to_show = filtered_heroes
    else:
        start_idx = (page - 1) * HEROES_PER_PAGE
        end_idx = start_idx + HEROES_PER_PAGE
        heroes_to_show = heroes[start_idx:end_idx]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≥–µ—Ä–æ–µ–≤ –ø–æ —Ç—Ä–∏ –≤ —Ä—è–¥
    for i in range(0, len(heroes_to_show), 3):
        row = []
        for j in range(3):
            if i + j < len(heroes_to_show):
                hero = heroes_to_show[i + j]
                row.append(InlineKeyboardButton(
                    hero['localized_name'], 
                    callback_data=f"hero:{hero['name']}"
                ))
        keyboard.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    if not search_query:
        nav_buttons = []
        max_pages = (len(heroes) + HEROES_PER_PAGE - 1) // HEROES_PER_PAGE
        
        if page > 1:
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"page:{page-1}"))
        if page < max_pages:
            nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"page:{page+1}"))
        
        if nav_buttons:
            keyboard.append(nav_buttons)
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –≥–µ—Ä–æ—è:"
    if not search_query:
        text += f"\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {max_pages}"
    elif not heroes_to_show:
        text = "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å."
    
    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(text, reply_markup=reply_markup)

@handle_errors
async def handle_hero_selection(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    
    data = query.data
    heroes = get_all_heroes()
    hero_names = [hero['name'] for hero in heroes]
    
    if data.startswith("page:"):
        page = int(data.split(":")[1])
        await send_hero_selection(update, context, page=page)
        return
    
    if data == "search":
        await query.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –∏–º–µ–Ω–∏ –≥–µ—Ä–æ—è –¥–ª—è –ø–æ–∏—Å–∫–∞:",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_search")
            ]])
        )
        context.user_data['waiting_for_search'] = True
        return
    
    if data == "cancel_search":
        context.user_data['waiting_for_search'] = False
        await send_hero_selection(update, context)
        return
    
    if data.startswith("hero:"):
        hero_name = data.split(":")[1]
        if hero_name not in hero_names:
            return

        match_id = context.user_data.get('match_id')
        nickname = context.user_data.get('nickname')

        if match_id is None or nickname is None:
            await start(update, context)
            return

        context.user_data['hero_name'] = hero_name
        await send_match_outcome_selection(query.message)

async def send_match_outcome_selection(message) -> None:
    keyboard = [
        [InlineKeyboardButton("–ü–æ–±–µ–¥–∞", callback_data='win')],
        [InlineKeyboardButton("–ü–æ—Ä–∞–∂–µ–Ω–∏–µ", callback_data='lose')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥ –º–∞—Ç—á–∞:', reply_markup=reply_markup)

async def handle_match_outcome(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()

    if query.data not in ['win', 'lose']:
        return

    match_outcome = query.data
    match_id = context.user_data.get('match_id')
    nickname = context.user_data.get('nickname')
    hero_name = context.user_data.get('hero_name')

    if match_id is None or nickname is None or hero_name is None:
        await start(update, context)
        return

    try:
        save_match(nickname, match_id, hero_name, match_outcome)
        await query.message.reply_text('–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!')
        await send_restart_button(query.message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
        await query.message.reply_text(
            '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. '
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
        )
    finally:
        context.user_data.clear()

async def send_restart_button(message) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–æ–≤–æ–≥–æ –º–∞—Ç—á–∞"""
    keyboard = [[InlineKeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤—ã–π –º–∞—Ç—á", callback_data='restart')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await message.reply_text('–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤—ã–π –º–∞—Ç—á?', reply_markup=reply_markup)

async def handle_restart(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ó–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤—ã–π –º–∞—Ç—á'"""
    query = update.callback_query
    await query.answer()

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤–≤–æ–¥–∞
    context.user_data.clear()
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º query.message –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ Update
    await query.message.reply_text('–í–≤–µ–¥–∏—Ç–µ ID –º–∞—Ç—á–∞:')
    context.user_data['waiting_for_match_id'] = True

async def last_matches(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    nickname = f"@{update.message.from_user.username}" if update.message.from_user.username else update.message.from_user.first_name
    
    try:
        matches = get_last_matches(nickname)
        
        if not matches:
            await update.message.reply_text('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π.')
            return
            
        matches_text = "üéÆ –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏:\n\n"
        for match in matches:
            outcome_emoji = "‚úÖ" if match['outcome'] == 'win' else "‚ùå"
            matches_text += (
                f"{match['played_at']}\n"
                f"–ì–µ—Ä–æ–π: {match['hero']}\n"
                f"–ò—Å—Ö–æ–¥: {outcome_emoji}\n"
                f"ID –º–∞—Ç—á–∞: {match['match_id']}\n\n"
            )
            
        await update.message.reply_text(matches_text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç—á–µ–π: {e}")
        await update.message.reply_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç—á–µ–π.') 