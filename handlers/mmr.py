"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å MMR
"""
import logging
from telegram import Update
from telegram.ext import CallbackContext
from database.models import get_or_create_user, get_user_mmr, update_user_mmr
from utils.decorators import handle_errors

logger = logging.getLogger(__name__)

def get_rank_by_mmr(mmr):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–Ω–≥ –∏ –ø–æ–¥—Ä–∞–Ω–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ MMR"""
    if mmr is None:
        return "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", None
        
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–Ω–≥
    if mmr >= 5420:
        rank = "Immortal"
        subrank = None  # –£ Immortal –Ω–µ—Ç –ø–æ–¥—Ä–∞–Ω–≥–∞
    elif mmr >= 4620:
        rank = "Divine"
        subrank = (mmr - 4620) // 270 + 1  # –ö–∞–∂–¥—ã–µ ~270 MMR
    elif mmr >= 3850:
        rank = "Ancient"
        subrank = (mmr - 3850) // 260 + 1
    elif mmr >= 3080:
        rank = "Legend"
        subrank = (mmr - 3080) // 260 + 1
    elif mmr >= 2310:
        rank = "Archon"
        subrank = (mmr - 2310) // 260 + 1
    elif mmr >= 1540:
        rank = "Crusader"
        subrank = (mmr - 1540) // 260 + 1
    elif mmr >= 770:
        rank = "Guardian"
        subrank = (mmr - 770) // 260 + 1
    else:
        rank = "Herald"
        subrank = (mmr // 260) + 1
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–¥—Ä–∞–Ω–≥ –æ—Ç 1 –¥–æ 5
    if subrank is not None:
        subrank = max(1, min(5, subrank))
    
    return rank, subrank

def get_rank_emoji(rank):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–Ω–≥–∞"""
    rank_emojis = {
        "Immortal": "üî±",
        "Divine": "‚öúÔ∏è",
        "Ancient": "üèÖ",
        "Legend": "üéñÔ∏è",
        "Archon": "üèÜ",
        "Crusader": "üõ°Ô∏è",
        "Guardian": "üî∞",
        "Herald": "‚≠ê",
        "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω": "‚ùì"
    }
    return rank_emojis.get(rank, "‚ùì")

def format_rank(rank, subrank):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–Ω–≥ —Å –ø–æ–¥—Ä–∞–Ω–≥–æ–º"""
    if rank == "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω":
        return rank
    elif rank == "Immortal":
        return rank
    else:
        return f"{rank} {subrank}"

@handle_errors
async def mmr_command(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π MMR –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    nickname = f"@{update.message.from_user.username}" if update.message.from_user.username else update.message.from_user.first_name
    user_id = get_or_create_user(nickname)
    mmr_data = get_user_mmr(user_id)
    
    mmr = mmr_data['mmr'] if mmr_data else None
    rank, subrank = get_rank_by_mmr(mmr)
    rank_emoji = get_rank_emoji(rank)
    
    if mmr is None:
        message = (
            "‚ùó MMR –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /setmmr —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π MMR"
        )
    else:
        formatted_rank = format_rank(rank, subrank)
        message = (
            f"üéÆ –¢–µ–∫—É—â–∏–π MMR: {mmr}\n"
            f"{rank_emoji} –†–∞–Ω–≥: {formatted_rank}"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–Ω–≥–∞
        if rank != "Immortal":
            next_rank_mmr = {
                "Herald": 770,
                "Guardian": 1540,
                "Crusader": 2310,
                "Archon": 3080,
                "Legend": 3850,
                "Ancient": 4620,
                "Divine": 5420
            }
            
            current_rank_mmr = next_rank_mmr.get(rank, 0)
            next_rank = list(next_rank_mmr.keys())[list(next_rank_mmr.keys()).index(rank) + 1]
            next_rank_required = next_rank_mmr[next_rank]
            
            mmr_needed = next_rank_required - mmr
            progress = ((mmr - current_rank_mmr) / (next_rank_required - current_rank_mmr)) * 100
            
            message += f"\n\n–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ {next_rank}:\n"
            progress_bar = "‚ñà" * int(progress / 10) + "‚ñÅ" * (10 - int(progress / 10))
            message += f"{progress_bar} {progress:.1f}%\n"
            message += f"‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å –Ω–∞–±—Ä–∞—Ç—å: {mmr_needed} MMR"
    
    await update.message.reply_text(message)

@handle_errors
async def set_mmr_command(update: Update, context: CallbackContext) -> None:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç MMR –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not context.args:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ MMR.\n"
            "–ü—Ä–∏–º–µ—Ä: /setmmr 2000"
        )
        return
    
    try:
        mmr = int(context.args[0])
        if mmr < 0 or mmr > 12000:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã
            raise ValueError
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ MMR (0-12000)")
        return
    
    nickname = f"@{update.message.from_user.username}" if update.message.from_user.username else update.message.from_user.first_name
    user_id = get_or_create_user(nickname)
    update_user_mmr(user_id, mmr)
    
    rank, subrank = get_rank_by_mmr(mmr)
    rank_emoji = get_rank_emoji(rank)
    
    await update.message.reply_text(
        f"‚úÖ MMR —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n"
        f"üéÆ –¢–µ–∫—É—â–∏–π MMR: {mmr}\n"
        f"{rank_emoji} –†–∞–Ω–≥: {format_rank(rank, subrank)}"
    ) 