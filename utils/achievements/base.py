"""–ë–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
from dataclasses import dataclass
from typing import Optional, Dict, Any

@dataclass
class Achievement:
    id: str
    name: str
    description: str
    emoji: str
    category: str
    progress_max: Optional[int] = None  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    hidden: bool = False  # –°–∫—Ä—ã—Ç—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    requires: Optional[str] = None  # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥—Ä—É–≥–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    
    def format_progress(self, current: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
        if not self.progress_max:
            return ""
        return f" ({current}/{self.progress_max})"

class AchievementProgress:
    def __init__(self):
        self.progress: Dict[str, int] = {}  # –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫–∞–∂–¥–æ–º—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é
        self.unlocked_at: Dict[str, str] = {}  # –í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    
    def update(self, achievement_id: str, value: int):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
        self.progress[achievement_id] = value
    
    def unlock(self, achievement_id: str, timestamp: str):
        """–û—Ç–º–µ—á–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∫–∞–∫ –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ"""
        self.unlocked_at[achievement_id] = timestamp

class AchievementCategory:
    # –°–ª–æ–≤–∞—Ä—å —Å —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    CATEGORY_EMOJIS = {
        '–ú–∞—Ç—á–∏': 'üéÆ',
        'MMR': 'üìà',
        '–ì–µ—Ä–æ–∏': '‚öîÔ∏è',
        '–í–∏–Ω—Ä–µ–π—Ç': 'üéØ',
        '–û—Å–æ–±—ã–µ': '‚ú®'
    }

    def __init__(self, name, achievements):
        self.name = name
        self.emoji = self.CATEGORY_EMOJIS.get(name, 'üìã')  # –î–µ—Ñ–æ–ª—Ç–Ω—ã–π —ç–º–æ–¥–∑–∏ –µ—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        self.achievements = achievements

    def check(self, stats: Dict[str, Any], mmr_data: Optional[Dict[str, Any]] = None) -> tuple[list[str], AchievementProgress]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ –∏—Ö –ø—Ä–æ–≥—Ä–µ—Å—Å
        """
        return [], AchievementProgress()  # –ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç tuple

    def check_specific(self, stats: Dict[str, Any], mmr_data: Optional[Dict[str, Any]] = None) -> tuple[list[str], AchievementProgress]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ –∏—Ö –ø—Ä–æ–≥—Ä–µ—Å—Å
        """
        return [], AchievementProgress()  # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞

    def check_alternative(self, stats: Dict[str, Any], mmr_data: Optional[Dict[str, Any]] = None) -> tuple[list[str], AchievementProgress]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ –∏—Ö –ø—Ä–æ–≥—Ä–µ—Å—Å
        """
        return [], AchievementProgress()  # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞

    def check_combined(self, stats: Dict[str, Any], mmr_data: Optional[Dict[str, Any]] = None) -> tuple[list[str], AchievementProgress]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ –∏—Ö –ø—Ä–æ–≥—Ä–µ—Å—Å
        """
        return [], AchievementProgress()  # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ 