from datetime import datetime
from database.connection import get_db
from database.models import get_or_create_user
from typing import Dict, List, Tuple, Optional
from utils.achievements import ACHIEVEMENT_CATEGORIES, get_all_achievements
from utils.achievements.base import AchievementProgress

def save_achievement(telegram_nickname, achievement_type):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    with get_db() as db:
        user_id = get_or_create_user(telegram_nickname)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        existing = db.execute(
            '''SELECT id FROM achievements 
               WHERE user_id = ? AND achievement_type = ?''',
            (user_id, achievement_type)
        ).fetchone()
        
        if not existing:
            db.execute(
                '''INSERT INTO achievements (user_id, achievement_type)
                   VALUES (?, ?)''',
                (user_id, achievement_type)
            )
            db.commit()
            return True
        return False

def check_and_save_achievements(telegram_nickname):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
    with get_db() as db:
        user_id = get_or_create_user(telegram_nickname)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        stats = db.execute(
            '''SELECT COUNT(*) as total_games,
               SUM(CASE WHEN outcome = 'win' THEN 1 ELSE 0 END) as wins
               FROM matches WHERE user_id = ?''',
            (user_id,)
        ).fetchone()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≥–µ—Ä–æ—è–º
        hero_stats = db.execute(
            '''SELECT hero, COUNT(*) as games,
               SUM(CASE WHEN outcome = 'win' THEN 1 ELSE 0 END) as wins
               FROM matches 
               WHERE user_id = ?
               GROUP BY hero''',
            (user_id,)
        ).fetchall()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–∏–∏
        recent_matches = db.execute(
            '''SELECT outcome
               FROM matches
               WHERE user_id = ?
               ORDER BY played_at DESC
               LIMIT 5''',
            (user_id,)
        ).fetchall()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        if stats['wins'] > 0:
            save_achievement(telegram_nickname, "üèÜ –ü–µ—Ä–≤–∞—è –ø–æ–±–µ–¥–∞")
        
        if stats['total_games'] >= 100:
            save_achievement(telegram_nickname, "üíØ 100 –º–∞—Ç—á–µ–π")
        elif stats['total_games'] >= 50:
            save_achievement(telegram_nickname, "üéÆ 50 –º–∞—Ç—á–µ–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–∏—é –ø–æ–±–µ–¥
        win_streak = 0
        for match in recent_matches:
            if match['outcome'] == 'win':
                win_streak += 1
            else:
                break
        
        if win_streak >= 5:
            save_achievement(telegram_nickname, f"üî• –°–µ—Ä–∏—è –∏–∑ {win_streak} –ø–æ–±–µ–¥")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ –≥–µ—Ä–æ–µ–≤
        for hero in hero_stats:
            if hero['games'] >= 20:
                winrate = (hero['wins'] / hero['games'] * 100)
                if winrate > 60:
                    save_achievement(telegram_nickname, f"üëë –ú–∞—Å—Ç–µ—Ä {hero['hero']}")

def get_achievements(telegram_nickname):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    with get_db() as db:
        user_id = get_or_create_user(telegram_nickname)
        
        achievements = db.execute(
            '''SELECT achievement_type 
               FROM achievements 
               WHERE user_id = ?
               ORDER BY achieved_at DESC''',
            (user_id,)
        ).fetchall()
        
        return [achievement['achievement_type'] for achievement in achievements]

"""–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏"""
class AchievementsService:
    def __init__(self):
        self.achievements = get_all_achievements()
        self.categories = ACHIEVEMENT_CATEGORIES
    
    def check_achievements(self, stats: Dict, mmr_data: Optional[Dict] = None) -> Tuple[List[str], Dict[str, AchievementProgress]]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∏ –∏—Ö –ø—Ä–æ–≥—Ä–µ—Å—Å"""
        earned = []
        progress = {}
        
        for category in self.categories:
            category_earned, category_progress = category.check(stats, mmr_data)
            earned.extend(category_earned)
            progress[category.name] = category_progress
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        final_earned = []
        for achievement_id in earned:
            achievement = self.achievements[achievement_id]
            if achievement.requires:
                if achievement.requires in earned:
                    final_earned.append(achievement_id)
            else:
                final_earned.append(achievement_id)
        
        return final_earned, progress
    
    def get_achievement_progress(self, achievement_id: str, progress: AchievementProgress) -> Optional[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
        achievement = self.achievements.get(achievement_id)
        if not achievement or not achievement.progress_max:
            return None
            
        current = progress.progress.get(achievement_id, 0)
        return achievement.format_progress(current)
    
    def get_unlocked_time(self, achievement_id: str, progress: AchievementProgress) -> Optional[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
        return progress.unlocked_at.get(achievement_id) 